# This is a basic workflow to help you get started with Actions

name: my_msvc_CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ portable_config ]
    tags: [ v*]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Check if Git tag exists
        run: |
          echo "HEAD_TAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV

      - name: Runs only if Git tag exists
        run: echo "This runs because Git tag points at HEAD ..."
        if: env.HEAD_TAG != ''

# Enable Developer Command Prompt
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Build something requiring CL.EXE
        run: |
          perl mkfiles.pl
          cd windows
          dir
          nmake -f Makefile.vc
          zip --junk-paths putty_AIO_binary p*.exe

        # Example use of `signedReleaseFile` output -- not needed
      - uses: actions/upload-artifact@v2
        with:
          name: upload-artifact
          path: windows/putty_AIO_binary.zip

      - name: Get the tag name
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: env.HEAD_TAG != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: putty portable ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload our Artifact Assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows/putty_AIO_binary.zip
          asset_name: windows/putty_AIO_binary_${{ env.TAG }}.zip
          asset_content_type: application/zip
        if: env.HEAD_TAG != ''

          
